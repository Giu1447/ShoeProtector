services:
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - product-service
      - user-service
      - cart-service
      - order-service
    networks:
      - mynetwork

  product-service:
    build: ./product-service
    ports:
      - "8081:8080"
    restart: unless-stopped
    depends_on:
      - db
    networks:
      - mynetwork

  user-service:
    build: ./user-service
    ports:
      - "8082:8080"
    restart: unless-stopped
    depends_on:
      - db
    networks:
      - mynetwork

  cart-service:
    build: ./cart-service
    ports:
      - "8083:8080"
    restart: unless-stopped
    depends_on:
      - db
    networks:
      - mynetwork

  order-service:
    build: ./order-service
    ports:
      - "8084:8080"
    restart: unless-stopped
    depends_on:
      - db
    networks:
      - mynetwork

  db:
    image: postgres:13
    container_name: postgres_db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./product-service/src/main/resources/init.sql:/docker-entrypoint-initdb.d/1_product.sql
      - ./user-service/src/main/resources/init.sql:/docker-entrypoint-initdb.d/2_user.sql
      - ./cart-service/src/main/resources/init.sql:/docker-entrypoint-initdb.d/3_cart.sql
      - ./order-service/src/main/resources/init.sql:/docker-entrypoint-initdb.d/4_order.sql
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      retries: 5
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge
volumes:
  postgres_data:
    driver: local